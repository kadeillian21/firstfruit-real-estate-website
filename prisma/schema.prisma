// This is your Prisma schema file for the BRRRR Calculator

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  scenarios     Scenario[]
}

model Scenario {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Buy phase inputs
  purchasePrice       Decimal
  closingCosts        Decimal  @default(0)
  downPaymentPercent  Decimal
  interestRate        Decimal
  loanTermYears       Int      @default(30)
  propertyTaxRate     Decimal  @default(0)
  insuranceAnnual     Decimal  @default(0)
  utilityPriceMonthly Decimal  @default(0)
  
  // Rehab phase inputs
  rehabCost           Decimal
  rehabTimeMonths     Int      @default(3)
  holdingCostsMonthly Decimal  @default(0)
  
  // After Repair Value
  afterRepairValue    Decimal
  
  // Rent phase inputs
  monthlyRent         Decimal
  vacancyRatePercent  Decimal  @default("8.33") // 1/12 = 8.33%
  propertyMgmtPercent Decimal  @default(0)
  maintenancePercent  Decimal  @default("5")
  capExPercent        Decimal  @default("5")
  
  // Refinance phase inputs
  refinanceLTV        Decimal  @default("75")
  refinanceRate       Decimal? // If null, uses original interestRate
  refinanceTermYears  Int?     // If null, uses original loanTermYears
  refinanceClosingCosts Decimal @default(0)
  
  // Repeat phase (for projections)
  projectionYears     Int      @default(5)
  appreciationPercent Decimal  @default("3")
  rentGrowthPercent   Decimal  @default("2")
  expenseGrowthPercent Decimal @default("2")
  
  // Relations
  events              ScenarioEvent[]
  monthlyCalculations MonthlyCalculation[]
}

model ScenarioEvent {
  id          String   @id @default(cuid())
  scenarioId  String
  scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  
  eventType   EventType
  month       Int      // Month index from start (0 = purchase month)
  description String?
  metadata    Json?    // Additional data specific to event type
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum EventType {
  PURCHASE
  REHAB_START
  REHAB_END
  TENANT_MOVE_IN
  REFINANCE
  PROPERTY_SALE
  CUSTOM
}

model MonthlyCalculation {
  id          String   @id @default(cuid())
  scenarioId  String
  scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  
  month       Int      // Month index from start (0 = purchase month)
  
  // Financial position
  propertyValue        Decimal
  loanBalance          Decimal
  equity               Decimal
  
  // Cash flow
  rentalIncome         Decimal
  vacancyLoss          Decimal
  effectiveIncome      Decimal
  
  // Expenses
  mortgagePayment      Decimal
  propertyTax          Decimal
  insurance            Decimal
  propertyManagement   Decimal
  maintenance          Decimal
  capitalExpenditures  Decimal
  utilities            Decimal
  otherExpenses        Decimal
  totalExpenses        Decimal
  
  // Results
  cashFlow             Decimal  // effectiveIncome - totalExpenses
  
  // Cumulative metrics
  totalInvested        Decimal  // Total cash invested up to this point
  totalProfit          Decimal  // Cumulative cash flow
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Indexes for efficient queries
  @@index([scenarioId, month])
}

// For storing saved comparison sets
model ComparisonSet {
  id          String   @id @default(cuid())
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  scenarioIds String[] // Array of scenario IDs to compare
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
